name: ci
on: [ push ]
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      APP_VERSION: ${{ steps.build-variables.outputs.APP_VERSION }}
      IMAGE_REGISTRY: ${{ steps.build-variables.outputs.IMAGE_REGISTRY }}
      IMAGE_TAG: ${{ steps.build-variables.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: luk4s
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get output
        id: build-variables
        run: |
          APP_VERSION=$(head ./version)
          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_OUTPUT"
          echo "IMAGE_REGISTRY=${{vars.IMAGE_REGISTRY}}" >> "$GITHUB_OUTPUT"
          echo "IMAGE_TAG=${{github.ref_name}}" >> "$GITHUB_OUTPUT"
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          cache-to: type=registry,ref=${{ steps.build-variables.outputs.IMAGE_REGISTRY }}:build-cache,image-manifest=true
          cache-from: type=registry,ref=${{ steps.build-variables.outputs.IMAGE_REGISTRY }}:build-cache
          tags: ${{ steps.build-variables.outputs.IMAGE_REGISTRY }}:${{ steps.build-variables.outputs.IMAGE_TAG }}
  test:
    runs-on: ubuntu-latest
    needs: "build"
    env:
      DATABASE_HOST: localhost
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      # Rails verifies the time zone in DB is the same as the time zone of the Rails app
      TZ: "Europe/Prague"
    services:
      # https://github.com/actions/example-services/blob/master/.github/workflows/postgres-service.yml
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        # tmpfs makes DB faster by using RAM
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: luk4s
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Prepare .env
        run: |
          echo "DATABASE_HOST=$DATABASE_HOST" >> .env.test
          echo "POSTGRES_USER=$POSTGRES_USER" >> .env.test
          echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env.test
          echo "RAILS_ENV=test" >> .env.test
          echo "RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }}" >> .env.test
          echo "VITE_RUBY_AUTO_BUILD=false" >> .env.test
      - run: docker run --network host --rm --env-file .env.test --entrypoint '' "${{ needs.build.outputs.IMAGE_REGISTRY }}:${{ needs.build.outputs.IMAGE_TAG }}" bundle exec rails db:test:prepare
      - run: docker run --network host --rm --env-file .env.test --entrypoint '' "${{ needs.build.outputs.IMAGE_REGISTRY }}:${{ needs.build.outputs.IMAGE_TAG }}" bundle exec rspec
  deploy:
    runs-on: ubuntu-latest
    needs: "test"
    if: success() && github.ref == 'refs/heads/master'
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: luk4s
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Aliases image
        run: |
          docker pull "${{ needs.build.outputs.IMAGE_REGISTRY }}:${{ needs.build.outputs.IMAGE_TAG }}"
          docker tag "${{ needs.build.outputs.IMAGE_REGISTRY }}:${{ needs.build.outputs.IMAGE_TAG }}" "${{ needs.build.outputs.IMAGE_REGISTRY }}:${{ needs.build.outputs.APP_VERSION }}"
          docker tag "${{ needs.build.outputs.IMAGE_REGISTRY }}:${{ needs.build.outputs.IMAGE_TAG }}" "${{ needs.build.outputs.IMAGE_REGISTRY }}:latest"
          docker push "${{ needs.build.outputs.IMAGE_REGISTRY }}:${{ needs.build.outputs.APP_VERSION }}"
          docker push "${{ needs.build.outputs.IMAGE_REGISTRY }}:latest"
